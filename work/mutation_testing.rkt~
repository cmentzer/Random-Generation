#lang racket

(require redex
         "interface.rkt")

(define p (read (open-input-file "Desktop/div100.txt")))

(define (get-contract t)
  (match t
    [(list 'provide (list 'contract-out (list _ more))) more]
    [_ "error"]))

(define (get-body t)
  (match t
    [(list 'define _ more) more]
    [_ "error"]))

(define (parse-program p x)
  (cond
    [(empty? p) "error"]
    [(equal? "error" (x (first p))) (parse-program (rest p) x)]
    [else (x (first p))]))

(define (contract->type c)
  (let ([cpair (match c
                 [(cons '-> (cons a b)) (cons a b)])])
    (let ([cin (first cpair)] [cout (second cpair)])
      (cons (get-type-from-contract cin)
            (get-type-from-contract cout)))))

(define (get-type-from-contract c)
  (match c
    ['integer? 'num]
    ['real?    'num]
    ['<=/c     'num]
    ['>=/c     'num]
    ['>/c      'num]
    ['</c      'num]
    
    ['and      'bool]
    ['or       'bool]))

