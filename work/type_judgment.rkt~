#lang racket
(require redex
         "grammar.rkt")

;; define the behavior of type inside the language
(define-judgment-form L
  #:mode (type I I O)
  #:contract (type Γ e τ)
  
  ;; function application
  [(type Γ e_1 (-> τ_1 τ_2))
   (type Γ e_2 τ_1)
   -------------------------
   (type Γ (e_1 e_2) τ_2)]
  
  ;; 0 argument function application
  [(type Γ e_1 (-> τ_1))
   ------------------------
   (type Γ (e_1) τ_1)]
  
  ;; A 0 argument lambda has the type (-> τ)
  ;; where τ is the type of its body
  [(type Γ e_1 τ_1)
   -------------------------
   (type Γ (λ () e_1) (-> τ_1))]
  
  ;; A many argument lambda has the type (-> τ_1 τ_2 ... τ_n)
  ;; where τ_1 - τ_(n-1) are the types of the arguments 
  ;; and τ_n is the type of the body
  [(type ((χ_1 τ_1) (χ_2 τ_2) ... Γ) e_3 τ_3)
   -----------------------------------
   (type Γ (λ ((χ_1 τ_1) (χ_2 τ_2) ...) e_3) (-> τ_1 τ_2 ... τ_3))]
  
  ;; A variable with a type attached to it (but not in environment)!
  ;; has its attached type
  [---------------------
   (type ((χ τ) Γ) χ τ)]
  
  [(type Γ e_1 num)
   (type Γ e_2 num)
   --------------------
   (type Γ (+ e_1 e_2) num)]
  
  ;; numbers have type num
  [--------------------
   (type Γ number num)]
  
  ;; booleans have type bool
  [--------------------
   (type Γ boolean bool)]
  
  ;; A variable in the environment has the type attached to it
  [(where τ (lookup Γ χ))
   ----------------------
   (type Γ χ τ)])

(define (flatten-env env)
  (let [(last (last env))]
    (cond 
      [(equal? last '·) env]
      [else (append (remv last env) last)])))

(define-metafunction L
  [(lookup Γ_1 χ_1) ,(lookup-rkt (term Γ_1) (term χ_1))])

(define (lookup-rkt env x)
  (if (equal? env '·)
      #f
      (lookup-helper (flatten-env env) x)))

(define (lookup-helper env x)
  ;(printf "~a~n" env)
  (cond
    [(empty? env) #f]
    [(equal? (first env) x) (second env)]
    [else (lookup-helper (rest env) x)]))

(define-metafunction L
  [(+env Γ_1 χ_1 τ_1) ((χ_1 τ_1) Γ_1)])

(define-metafunction L 
  [(get-bound-var Γ τ) ,(get-bound-var-rkt (term Γ) (term τ))])

(define (get-bound-var-rkt env t)
  (if (equal? env '·)
      #f
      (get-bound-var-helper (flatten-env env) t)))

(define (get-bound-var-helper env t)
  (begin ;(printf "~a~n" env)
         (cond 
           [(equal? (first env) '·) 'error]
           [(equal? t (second (first env))) (first (first env))]
           [else (get-bound-var-rkt (rest env) t)])))

(define (prob n)
  (> n (/ (random 100) 100)))

(define used-sym (box '()))
(define (get-next-sym)
  (let [(out (generate-term L χ 0))]
    (if (member out (unbox used-sym))
        (get-next-sym)
        (begin (set-box! used-sym (append (unbox used-sym) (list out)))
               out))))

(define (random-type)
    (let [(x (random 2))]
      (if (= 0 x) 'num 'bool)))

;; used in language definition with side conidition
;; to ensure that we only attempt to apply functions
;; to values, and not values to values. 
(define (fun? e)
  (let ([term (term ,e)])
    (printf "~a~n" term)
    (judgment-holds
     (type ·
           ,term
           (-> τ ...)))))

(define-judgment-form L 
  #:mode (gen I I I O)
  #:contract (gen Γ τ n e)
  
  ;; decrease depth
  [(gen Γ τ ,(- (term n+) 1) e)
   -------------------
   (gen Γ τ n+ e)]
  
  ;; 1 argument λ
  [(where χ ,(get-next-sym))
   (gen (+env Γ χ τ_1) τ_2 n e)
   --------------------
   (gen Γ (-> τ_1 τ_2) n (λ ((χ τ_1)) e))]
  
  ;; 0 argument λ
  [(gen Γ τ_2 n e)
   -------------------
   (gen Γ (-> τ_2) n (λ () e))]
  
  ;; 0 argument function application
  [(where τ_1 num)
   (gen Γ (-> τ_1) ,(- (term n+) 1) e_1)
   --------------------
   (gen Γ τ_1 n+ (e_1))]
  
  ;; function application
  [(where τ_1 ,(random-type))
   (gen Γ (-> τ_1 τ_2) ,(- (term n+) 1) e_1)
   (gen Γ τ_1 ,(- (term n+) 1) e_2)    
   --------------------
   (gen Γ τ_2 n+ (e_1 e_2))]
  
  ;; ====== built-in functions =====
  
  [(gen Γ num ,(- (term n+) 1) e_1)
   (gen Γ num ,(- (term n+) 1) e_2)
   --------------------
   (gen Γ num n+ (+ e_1 e_2))]
  
  ;; ====== level 0 forms ======
  
  ;; an expression e can be an already bound variable ...
  [;(side-condition ,(prob 0.5))
   (where χ (get-bound-var Γ τ))
   --------------------
   (gen Γ τ 0 χ)]
  
  ;; ... or it can be a number
  [;(side-condition ,(prob 0.5))
   --------------------
   (gen Γ num 0 ,(random 100))]
  
  ;; or a boolean
  [--------------------
     (gen Γ bool 0 #t)])

(define-judgment-form L
  #:mode (pred I I I O)
  #:contract (pred Γ τ n pred)
  
  [-------------------
   (pred Γ num 0 num?)]
  
  [(gen Γ (-> num bool) 0 e)
   -------------------
   (pred Γ num 0 e)])
              
              
#|
Predicates

num?
int?
real?
pos?
zero?

bool?
>
<
<=
>=
=?

true?
not
or
and

|#
              
(define-judgment-form L 
  #:mode (gen/D I I I O)
  #:contract (gen/D Γ τ n D)
  
  [(where χ ,(get-next-sym))
   (gen Γ τ n e)
   --------------------
   (gen/D Γ τ n (define χ e))]
  
  [(where χ_1 ,(get-next-sym))
   (where χ_2 ,(get-next-sym))
   (gen (+env Γ χ_1 τ_1) τ_2 n e)
   --------------------
   (gen/D Γ (-> τ_1 τ_2) n (define (χ_2 ((χ_1 τ_1)) e)))])

;;TESTS
(test-equal
 (judgment-holds
  (type · (λ ((x num)) x)
        τ) τ)
 (list (term (-> num num))))

(test-equal
 (judgment-holds
  (type ·
        ((λ ((x num)) 1) 1)
        τ) τ)
 '(num))

(test-equal
 (judgment-holds
  (type ·
        (λ () 1)
        τ) τ)
 '((-> num)))

(judgment-holds
 (gen · num 0
      e) e)

(judgment-holds
 (gen · (-> num) 0
      e) e)

(judgment-holds
 (gen · (-> num num) 0
      e) e)

(judgment-holds
 (gen · (-> (-> num num)) 0
      e) e)

(judgment-holds
 (gen · (-> (-> num num) (-> num num)) 0
      e) e)

(judgment-holds
 (gen · (-> (-> (-> num num) num)) 0
      e) e)

;; manually add a variable to the environment
(judgment-holds
 (gen ((x num) ·) (-> (-> num num) num) 0
      e) e)

;; typecheck a term generated by "gen" using "type"
(judgment-holds
 (type · 
       ,(first (judgment-holds 
                (gen · num 0 e) e))
       τ) τ)

(judgment-holds
 (type ((x num) ·) (+ 1 x)
       τ) τ)

(define type-list '(num
                    (-> num)
                    (-> num num)
                    (-> (-> num num))
                    (-> num (-> num num))
                    (-> (-> num num) num)
                    (-> (-> num num) (-> num num))
                    bool
                    (-> bool)
                    (-> bool bool)
                    (-> (-> bool bool))
                    (-> bool (-> bool bool))
                    (-> (-> bool bool) bool)
                    (-> (-> bool bool) (-> bool bool))
                    (-> num bool)
                    (-> bool num)
                    (-> (-> bool num))
                    (-> num (-> bool bool))
                    (-> bool (-> num num))
                    (-> (-> bool bool) num)
                    (-> (-> num num) (-> bool bool))))

(define (test depth)
  (for ([τ (in-list type-list)])
    (begin
      (printf "generating terms of type ~a ... " τ)
      (define terms (judgment-holds
       (gen · ,τ ,depth
            e) e))
      (printf "found ~a~n" (length terms)))))

;(test 2) 