#lang racket

(require redex
         "grammar.rkt"
         "type_judgment.rkt"
         "lib.rkt")

;;TESTS
(test-equal
 (judgment-holds
  (type · (λ ((x num)) x)
        τ) τ)
 (list (term (-> num num))))

(test-equal
 (judgment-holds
  (type ·
        ((λ ((x num)) 1) 1)
        τ) τ)
 '(num))

(test-equal
 (judgment-holds
  (type ·
        (λ () 1)
        τ) τ)
 '((-> num)))

(judgment-holds
 (gen · num 0
      e) e)

(judgment-holds
 (gen · (-> num) 0
      e) e)

(judgment-holds
 (gen · (-> num num) 0
      e) e)

(judgment-holds
 (gen · (-> (-> num num)) 0
      e) e)

(judgment-holds
 (gen · (-> (-> num num) (-> num num)) 0
      e) e)

(judgment-holds
 (gen · (-> (-> (-> num num) num)) 0
      e) e)

;; manually add a variable to the environment
(judgment-holds
 (gen ((x num) ·) (-> (-> num num) num) 0
      e) e)

;; typecheck a term generated by "gen" using "type"
(judgment-holds
 (type · 
       ,(first (judgment-holds 
                (gen · num 0 e) e))
       τ) τ)

(judgment-holds
 (type ((x num) ·) (+ 1 x)
       τ) τ)

(define type-list '(num
                    (-> num)
                    (-> num num)
                    (-> (-> num num))
                    (-> num (-> num num))
                    (-> (-> num num) num)
                    (-> (-> num num) (-> num num))
                    bool
                    (-> bool)
                    (-> bool bool)
                    (-> (-> bool bool))
                    (-> bool (-> bool bool))
                    (-> (-> bool bool) bool)
                    (-> (-> bool bool) (-> bool bool))
                    (-> num bool)
                    (-> bool num)
                    (-> (-> bool num))
                    (-> num (-> bool bool))
                    (-> bool (-> num num))
                    (-> (-> bool bool) num)
                    (-> (-> num num) (-> bool bool))))

(define (test depth)
  (for ([τ (in-list type-list)])
    (begin
      (printf "generating terms of type ~a ... " τ)
      (define terms (judgment-holds
       (gen · ,τ ,depth
            e) e))
      (printf "found ~a~n" (length terms)))))

;(test 2) 